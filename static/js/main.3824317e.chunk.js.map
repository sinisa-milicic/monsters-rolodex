{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","searchFieldUpdate","event","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAGaA,G,kBAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,mCAAML,EAAMI,QAAQE,KAApB,OACA,kCAAKN,EAAMI,QAAQG,MAAnB,YCHKC,EAAW,SAAAR,GAAK,OACzB,sBAAKC,UAAU,YAAf,cACID,EAAMS,SAASC,KACX,SAAAN,GAAO,OAAK,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,OAFvC,QCFSM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBACIC,KAAK,SACLF,YAAaA,EACbX,UAAU,SACVc,SAAUF,MCmCHG,E,kDApCb,aAAe,IAAD,8BACZ,gBAaFC,kBAAoB,SAACC,GACnB,EAAKC,SAAS,CACZC,YAAaF,EAAMG,OAAOC,SAd5B,EAAKC,MAAQ,CACXd,SAAU,GACVW,YAAa,IAJH,E,gEAQO,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACV,SAASmB,S,+BASjC,IAAD,EAC2BC,KAAKN,MAA/Bd,EADD,EACCA,SAAUW,EADX,EACWA,YACZU,EAAmBrB,EAASsB,QAChC,SAAA3B,GAAO,OAAIA,EAAQE,KAAK0B,cAAcC,SAASb,EAAYY,kBAC7D,OACE,sBAAK/B,UAAU,MAAf,UACE,mDACA,cAAC,EAAD,CACEW,YAAY,kBACZC,aAAcgB,KAAKZ,oBACrB,cAAC,EAAD,CAAUR,SAAUqB,W,GA/BVI,IAAMC,WCMTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.3824317e.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\n\nexport const Card = (props) => (\n    <div className=\"card-container\">\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\n        <h2> {props.monster.name} </h2>\n        <p> {props.monster.email} </p>\n    </div>\n);","import React from 'react';\nimport './card-list.styles.css';\nimport {Card} from '../card/card.component';\n\nexport const CardList = props => (\n    <div className=\"card-list\"> {\n        props.monsters.map(\n            monster => (<Card key={monster.id} monster={monster}/>)\n        )\n    } </div>\n);","import React from 'react';\nimport './search-box.styles.css';\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n    <input \n        type='search' \n        placeholder={placeholder}\n        className='search'\n        onChange={handleChange} />\n)","import React from 'react';\nimport './App.css';\nimport {CardList} from './components/card-list/card-list.component';\nimport {SearchBox} from './components/search-box/search-box.component';\n\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({monsters:users}))\n  }\n\n  searchFieldUpdate = (event) => {\n    this.setState({\n      searchField: event.target.value\n    });\n  }\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(\n      monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\n    return (\n      <div className=\"App\">\n        <h1> Monsters Roladex</h1>\n        <SearchBox \n          placeholder='Filter Monsters' \n          handleChange={this.searchFieldUpdate} />\n        <CardList monsters={filteredMonsters}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}